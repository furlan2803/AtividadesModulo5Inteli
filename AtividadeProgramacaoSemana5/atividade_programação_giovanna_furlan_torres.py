# -*- coding: utf-8 -*-
"""Atividade_Programação_Giovanna Furlan Torres.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aWoeIHkakLx2-ASAcCeCXH2vVxSVS7P0

# Uso de funções de hash em Python

Pesquise uma biblioteca de hash (SHA-256) em Python e realize pelo menos 10 testes no total, registre os resultados em uma tabela e elabore uma descrição textual do método utilizado e dos resultados obtidos.

bibliotecas
"""

import hashlib
import time
import base64
from PIL import Image
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

"""# Casos de teste

Conjuntos de entradas, condições e procedimentos que são usados para avaliar o comportamento e a saída de um software ou sistema. Ou seja, verificar se o software funciona conforme o esperado.

1. Trocar o valor de um dos itens da array, exibindo a mudança no hash

2. Modificar uma letra em uma das strings de um array, exibindo a mudança no hash

3. Gerar o hash de uma frase, e dado um hash esperado, comparar com o gerado. Espera-se receber um erro.

4. Evitar colisões de hashs com entradas iguais

5. Criar uma array, juntar todas as palavras em uma única frase, criar um hash da frase.

6. Leitura de Hash de comprimentos e tipos variados

7. Criar hash de string vazia

8. Criar hash de uma imagem - modificar a imagem e comparar com o hash anterior

9. Criar um hash de um arquivo em excel

10. Criar um hash de um arquivo em txt

## Caso de teste 1

1. Trocar o valor de um dos itens da array, exibindo a mudança no hash

Criando um array com 10 números sortidos
"""

numeros = [45, 63, 13, 135, 2463, 673, 987, 145, 12, 56]

"""Exibindo o hash de todos os números do array"""

for i in numeros:

    # Transformar os números do array em string, depois converter em binário, no formato 'ascii'
    numeroTransformado = str(i).encode('ascii')

    # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal
    hashGerado = (hashlib.sha256(numeroTransformado)).hexdigest()
    
    # Exibe o hash gerado para cada número do array
    print(f"O hash SHA-256 de {i} é {hashGerado}\n")

"""Após gerar o hash, troca-se o item 0 do array, sendo do número 45 para 5. """

numeros[0] = 5  # trocar o valor da posição 0 por 5

numeros # Exibe novamente o array

"""Com a mudança realizada, exibe-se o hash atualizado da posição 0 do array criado."""

primeiraPosicao = str(numeros[0]).encode('ascii') # Transforma a primeira posição do array em string, depois converter em binário, no formato 'ascii'

hashGeradoDoArray = (hashlib.sha256(primeiraPosicao)).hexdigest() # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

print("O hash SHA-256 do primeiro item do array é", hashGeradoDoArray)  # Exibe o hashda primeira posição do array

"""**Resultado**



1.   Hash de 45


```
O hash SHA-256 de 45 é 811786ad1ae74adfdd20dd0372abaaebc6246e343aebd01da0bfc4c02bf0106c
```


2.   Hash de 5


```
O hash SHA-256 de 5 é  ef2d127de37b942baad06145e54b0c619a1f22327b2ebbcfbec78f5564afe39d
```

Validando o caso de teste
"""

if hashGeradoDoArray != "811786ad1ae74adfdd20dd0372abaaebc6246e343aebd01da0bfc4c02bf0106c":

    print("Teste Validado: Trocar o valor de um dos itens da array, exibindo a mudança no hash")

else:
    print("Teste Inválido: Trocar o valor de um dos itens da array, exibindo a mudança no hash")

"""## Caso de teste 2

2. Modificar uma letra em uma das strings de um array, exibindo a mudança no hash

Criando um array com 10 nomes aleatórios
"""

nomes = ["Vinicius", "Giovanna", "Thaina", "Rodrigo", "Dayllan", "Elias", "Pedro", "Amanda", "Bianca", "Jordan"]

"""Gerando o hash de cada nome da array"""

for x in nomes:

    # Converter as strings em binário, no formato 'ascii'
    nomesArray = x.encode('ascii')

    # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal
    hashNomes = (hashlib.sha256(nomesArray)).hexdigest()

    # Exibe o hash gerado para cada string do array
    print(f"O hash SHA-256 de {x} é {hashNomes}.\n")

"""Exclui-se uma letra "l" do nome "Dayllan"
"""

nomes[4] = "Daylan" # Alterando a posição 4 do array

nomes # Exibindo o novo array

"""Criando um hash da posição 4 modificada"""

QuartaPosicao = nomes[4].encode('ascii') # Converter em binário a quarta posição do array, no formato 'ascii'

hashGeradoNomes = (hashlib.sha256(QuartaPosicao)).hexdigest() # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

print("O hash SHA-256 da quarta posição do array é", hashGeradoNomes)  # Exibe o hash da quarta posição do array

"""**Resultado**



1.   Hash de Dayllan


```
O hash SHA-256 de Dayllan é c4c6a7704a268f323398cfc5ab2631b9970e5cc76005f228e54ad28e684aa189
```


2.   Hash de Daylan


```
O hash SHA-256 de Daylan é  32f0bd5dc1f817bd8edb2657bba587d27c6181a7275a05e0733c5943d156faa9
```

Validando o caso de teste
"""

if hashGeradoNomes != "c4c6a7704a268f323398cfc5ab2631b9970e5cc76005f228e54ad28e684aa189":

    print("Teste Validado: Modificar uma letra em uma das strings de um array, exibindo a mudança no hash")

else:
    print("Teste Inválido: Modificar uma letra em uma das strings de um array, exibindo a mudança no hash")

"""## Caso de teste 3

3. Gerar o hash de uma frase, e dado um hash esperado, comparar com o gerado. Espera-se receber um erro.

Definindo uma frase e gerando o hash dela
"""

frase = "Sempre para frente. Nunca para trás!" # Definição da frase a ser utilizada

hashFrase = hashlib.sha256(frase.encode()).hexdigest()  # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

print(f"O hash SHA-256 de '{frase}' é {hashFrase }.\n")  # Exibe o hash da frase

"""Gerando o hash da frase, removendo o ponto de exclamação. '!'"""

fraseAtualizada = "Sempre para frente. Nunca para trás" # Definição da frase a ser utilizada

hashFraseAtualizada = hashlib.sha256(fraseAtualizada.encode()).hexdigest()  # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

print(f"O hash SHA-256 de '{fraseAtualizada}' é {hashFraseAtualizada }.\n")  # Exibe o hash da frase

"""**Resultado**



1.   Hash de "Sempre para frente. Nunca para trás!"


```
O hash SHA-256 de "Sempre para frente. Nunca para trás!" é 7b235df462c1b220420c0840aae71e13cca2346696d6bee48626f71a38891a73.
```


2.   Hash de "Sempre para frente. Nunca para trás"


```
O hash SHA-256 de "Sempre para frente. Nunca para trás" é  d8a75c6759bcc334e204e4714eedcdc3f5f352c7e069870c496be95da941456c.
```

Validando o caso de teste
"""

if hashFrase == hashFraseAtualizada:
    print("Teste Válido: Gerar o hash de uma frase, e dado um hash esperado, comparar com o gerado. Espera-se receber um erro.")
else:
    print("Teste Inválido: Gerar o hash de uma frase, e dado um hash esperado, comparar com o gerado. Espera-se receber um erro.")

"""## Caso de teste 4

4. Evitar colisões de hashs com entradas iguais

Definir a frase e salvar o momento em que ela foi gerada, criando um hash
"""

fraseColisao1 = "Continue a nadar" # frase definida para a colisão

nonce = str(int(time.time() * 1000))  # gera um nonce baseado no horário atual em milissegundos

hashFrase1 = hashlib.sha256((fraseColisao1 + nonce).encode()).hexdigest() # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

"""Definir a frase igual e salvar o momento em que ela foi gerada, criando um novo hash"""

fraseColisao2 = "Continue a nadar" # frase definida para a colisão

nonce = str(int(time.time() * 1000))  # gera um nonce baseado no horário atual em milissegundos

hashFrase2 = hashlib.sha256((fraseColisao2 + nonce).encode()).hexdigest() # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

"""**Comparação**

1. Hash Frase 1 : 


```
  955ed4fb20b03d445d779d7084458f933cafe269d07f63a3fd9929103c020a6d
```

2. Hash Frase 2: 

```
b9cfdc1a1d69495731fc263b55f0e5c2322b6fa283c0c33825f0d8659042103d
```

Validação do caso de teste
"""

if hashFrase1 == hashFrase2:
    print("Teste Inválido: Evitar colisões de hashs com entradas iguais")
else:
    print("Teste Válido: Evitar colisões de hashs com entradas iguais")

"""## Caso de teste 5

5. Criar uma array, juntar todas as palavras em uma única frase, criar um hash da frase. 

OBS: Comparar se o Hash da frase, é igual ao hash das palavras juntas sem espaço.

Definindo o array de palavras
"""

palavras = ["As", "imperfeições", "definem", "a", "perfeição"] # cria o array de palavras

"""Juntando as palavras do array em uma frase, com espaços e gerando o hash."""

fraseCompleta = " ".join(palavras) # junta o array em uma única frase

hashFraseCompleta = hashlib.sha256(fraseCompleta.encode()).hexdigest() # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

print("Hash da frase com espaço:", hashFraseCompleta)

"""Juntando as palavras do array em uma frase, sem espaços e gerando o hash."""

fraseCompletaSemEspaco = "".join(palavras) # junta o array em uma única frase

hashFraseCompletaSemEspaco = hashlib.sha256(fraseCompletaSemEspaco.encode()).hexdigest() # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

print("Hash da frase sem espaço:", hashFraseCompletaSemEspaco)

"""**Comparação**



1.   Hash da frase com espaços


```
77182fed7871bae833ec84a8ee9040aadc976bce993fdc9d3181eda958713b1a
```


2.  Hash da frase em espaços


```
af1bdf31df28f7963b6e823b2072f0e508a56ceae414308d8c714492592d9e39
```

Validando caso de teste
"""

if hashFraseCompleta == hashFraseCompletaSemEspaco:
    print("Teste Inválido: Criar uma array, juntar todas as palavras em uma única frase, criar um hash da frase.")
else:
    print("Teste Válido: Criar uma array, juntar todas as palavras em uma única frase, criar um hash da frase.")

"""## Caso de teste 6

6. Leitura de Hash de comprimentos e tipos variados
"""

entradas = [] # Definição de um array de entradas do usuário

for z in range (5):

    entrada = input("Digite uma entrada: ") # Armazena a entrada do usuário em uma variável

    entradas.append(entrada) # Coloca as entradas do usuário dentro de uma array

entradas # Resultados das entradas no array

quantidadeEntradas = 0 # Armazenar a quantidade de hash gerados com base nas entradas

for entrada in entradas: 

    hasshGeradoEntradas = (hashlib.sha256(entrada.encode())).hexdigest() # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

    quantidadeEntradas += 1 # Adicionar a quantidade de entradas na variável 

    print(f"Hash da entrada '{entrada}': {hasshGeradoEntradas}\n") # Print das entradas com o hash

"""Validação caso de teste"""

if quantidadeEntradas == len(entradas) : 
    print("Teste Válido: Leitura de Hash de comprimentos e tipos variados")
else:
    print("Teste Inválido: Leitura de Hash de comprimentos e tipos variados")

"""## Caso de teste 7

7. Criar hash de string vazia
"""

stringVazia = "" # Definição da string utilizada

hashStringVazia = hashlib.sha256(stringVazia.encode()).hexdigest() # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

hashStringVazia # Resultado do Hash

"""Validação do caso de teste - Se o hash gerado foi o valor de hash para entradas vazias"""

HashEsperada = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" # Hash padrão para string vazia

if hashStringVazia == HashEsperada:
    print("Teste Válido: Criar hash de string vazia")
else:
    print("Teste Inválido: Criar hash de string vazia")

"""## Caso de teste 8

8. Criar hash de uma imagem - modificar a imagem e comparar com o hash anterior

Anexando uma imagem, realizando a conversão para 64 bytes, depois convertendo a mesma para hexadecimal, criando o hash
"""

with open('/content/drive/MyDrive/AtividadesGiovanna/FotoGiovanna.jpg', 'rb') as foto: # Abre o arquivo da imagem em formato JPEG

    imagem1 = Image.open(foto) # Abre a imagem do arquivo e armazenar em 'imagem1'

    imagemConvertida1 = base64.b64encode(imagem1.tobytes()).decode('utf-8') # Conversão da imagem em bytes e codificado em base64

    imagemHash1 =  hashlib.sha256(imagemConvertida1.encode()).hexdigest() # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

    print(" O Hash SHA-256 da primeira imagem é ", imagemHash1) # Exibe o hash gerado da imagem

"""Modificando o tamanho da Imagem, para o hash verificar se o hash fica diferente"""

with open('/content/drive/MyDrive/AtividadesGiovanna/FotoGiovanna2.png', 'rb') as foto2: # Abre o arquivo da imagem em formato PNG

    imagem2 = Image.open(foto2) # Abre a imagem do arquivo e armazenar em 'imagem2'

    imagemConvertida2 = base64.b64encode(imagem2.tobytes()).decode('utf-8') # Conversão da imagem em bytes e codificado em base64

    imagemHash2 =  hashlib.sha256(imagemConvertida2.encode()).hexdigest() # Cria-se um objeto com a base de números em bytes anterior, depois converte ele para hexadecimal

    print(" O Hash SHA-256 da segunda imagem é ", imagemHash2) # Exibe o hash gerado da imagem

"""Validando caso de teste"""

if imagemHash2 != imagemHash1:
    print("Teste Válido: Criar hash de uma imagem - modificar a imagem e comparar com o hash anterior\n")
    print("Os hash são diferentes!")
else:
    print("Teste Inválido: Criar hash de uma imagem - modificar a imagem e comparar com o hash anterior\n")
    print("Os hash são Iguais!")

"""## Caso de teste 9

9. Criar um hash de um arquivo em excel

Importação da base de dados utilizada e visualização da planilha
"""

#Importação da Base de dados - Planilha Exemplo
baseDeDados = pd.read_excel('/content/drive/MyDrive/AtividadesGiovanna/exemploDocumento.xlsx')

baseDeDados # Visualização da planilha

"""Conversão da planilha e criação do hash"""

planilhaConverter = baseDeDados.to_csv().encode() # Cria-se um objeto com o conteúdo da planilha em bytes

hash_planilha = hashlib.sha256(planilhaConverter).hexdigest() # Calcula o hash do conteúdo da planilha

print("O hash da planilha é ", hash_planilha) # Imprime o hash da planilha

"""Criação do hash das três colunas da planilha"""

colunas = baseDeDados.columns.tolist() # Cria uma lista com o nome de todas as colunas da planilha

for coluna in colunas:
   
    colunasConversao = baseDeDados[coluna].to_csv().encode()  # Cria-se um objeto com o conteúdo da coluna em bytes

    ColunasHash = hashlib.sha256(colunasConversao).hexdigest() # Calcula o hash do conteúdo da coluna usando o algoritmo SHA-256

    print(f"O hash da coluna {coluna} é {ColunasHash}\n") # Imprime o hash da coluna

"""**Comparação**



1.   Hash Planilha Inteira


```
c198d933e2f35dbce0af77e8bd450b20cd38e25ce726f6726c93a79348316eb5
```


2.   Hash Coluna Tensão V


```
241ebb6fcfb14f5a42aaab4e8ede1d9eda52e3749aa854db4c5eb182e0119299
```


3.   Hash Coluna Resistor Ω


```
db814cf8f794368309438c2e42331684352551b6fdec70205691113afd2eee9d
```


4.   Hash Coluna medida A


```
62166ec42a98617d70340ab8bbfa8844f5e7a13e4cc364c614a8b66c3b62b919
```

Validação do caso de teste
"""

# Array com todos os hashs da planilha, respectivamente citados acima
hashs = ['c198d933e2f35dbce0af77e8bd450b20cd38e25ce726f6726c93a79348316eb5',
         '241ebb6fcfb14f5a42aaab4e8ede1d9eda52e3749aa854db4c5eb182e0119299',
         'db814cf8f794368309438c2e42331684352551b6fdec70205691113afd2eee9d',
         '62166ec42a98617d70340ab8bbfa8844f5e7a13e4cc364c614a8b66c3b62b919']

if all(w == hashs[0] for w in hashs): # Cria uma lista de valores booleanos com cada elemento da lista hashs, comparando se é igual ao primeiro elemento hashs[0]
    print("Teste Inválido : Criar um hash de um arquivo em excel\n")
    print("Todos os elementos são iguais!")
else:
    print("Teste Válido : Criar um hash de um arquivo em excel\n")
    print("Existem elementos diferentes na lista!")

"""## Caso de teste 10

10. Criar um hash de um arquivo em txt

Importando o arquivo txt
"""

with open("/content/drive/MyDrive/AtividadesGiovanna/exemploHash.txt", "r") as arquivo: 

    arquivoTexto = arquivo.read() # Lê o arquivo de texto

"""Criando o hash do arquivo txt"""

hashTexto = (hashlib.sha256(arquivoTexto.encode())).hexdigest() # Calcula o hash do conteúdo da coluna usando o algoritmo SHA-256

print("Hash do código em SHA-256 do primeiro arquivo de texto:", hashTexto) # Imprime o hash

"""Lendo o conteúdo do arquivo txt"""

arquivoTexto

"""Importando outro arquivo txt com a palavra "Giovanna" com um 'N' a menos"""

with open("/content/drive/MyDrive/AtividadesGiovanna/exemploHashModificado.txt", "r") as arquivo2: 

    arquivoTexto2 = arquivo2.read() # Lê o arquivo de texto

"""Lendo o conteúdo do arquivo modificado"""

arquivoTexto2

"""Criando o hash do arquivo modificado"""

hashTexto2 = (hashlib.sha256(arquivoTexto2.encode())).hexdigest() # Calcula o hash do conteúdo da coluna usando o algoritmo SHA-256

print("Hash do código em SHA-256 do segundo arquivo de texto:", hashTexto2) # Imprime o hash

"""**Comparação**



1.   Hash arquivo de texto 1


```
c1789047e8d1f583b04117a02635cffd413fed5033cf210060742a3ce84c8af7
```


2.   Hash arquivo de texto 2


```
d851125908ebdf1bc30f55df3bdaa6c526b3be52760523eb2f9664aab415db4e
```

Validando caso de teste
"""

if hashTexto == hashTexto2: 
   print("Teste Inválido : Criar um hash de um arquivo em txt\n")
   print("Os arquivos mesmo diferentes entre si, possuem hash iguais!")
else:
    print("Teste Válido : Criar um hash de um arquivo em txt\n")
    print("Os arquivos são diferentes e apresentam hash's diferentes!")